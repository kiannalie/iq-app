{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport PodcastCard from \"../../components/atoms/PodcastCard\";\nimport CustomButton from \"../../components/atoms/CustomButton\";\nimport { COLORS, FONT_SIZES, SPACING } from \"../../utils/constants\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar podcasts = [{\n  id: '1',\n  color: '#ff6b6b'\n}, {\n  id: '2',\n  color: '#4ecdc4'\n}, {\n  id: '3',\n  color: '#45b7d1'\n}, {\n  id: '4',\n  color: '#96ceb4'\n}, {\n  id: '5',\n  color: '#ffeaa7'\n}, {\n  id: '6',\n  color: '#dda0dd'\n}, {\n  id: '7',\n  color: COLORS.secondary\n}, {\n  id: '8',\n  color: '#ff9ff3'\n}, {\n  id: '9',\n  color: '#54a0ff'\n}];\nvar PodcastSelectionScreen = function PodcastSelectionScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedPodcasts = _useState2[0],\n    setSelectedPodcasts = _useState2[1];\n  var togglePodcast = function togglePodcast(podcastId) {\n    setSelectedPodcasts(function (prev) {\n      return prev.includes(podcastId) ? prev.filter(function (id) {\n        return id !== podcastId;\n      }) : [].concat(_toConsumableArray(prev), [podcastId]);\n    });\n  };\n  var handleFinish = function handleFinish() {\n    console.log('Onboarding completed with selected podcasts:', selectedPodcasts);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.headerText,\n      children: \"FOLLOW YOUR FAVORITE PODCASTS\"\n    }), _jsx(ScrollView, {\n      style: styles.scrollView,\n      contentContainerStyle: styles.contentContainer,\n      showsVerticalScrollIndicator: false,\n      children: _jsx(View, {\n        style: styles.podcastGrid,\n        children: podcasts.map(function (podcast) {\n          return _jsx(PodcastCard, {\n            isSelected: selectedPodcasts.includes(podcast.id),\n            onPress: function onPress() {\n              return togglePodcast(podcast.id);\n            },\n            backgroundColor: podcast.color\n          }, podcast.id);\n        })\n      })\n    }), _jsx(View, {\n      style: styles.buttonContainer,\n      children: _jsx(CustomButton, {\n        title: \"Finish\",\n        onPress: handleFinish,\n        variant: \"secondary\",\n        style: styles.finishButton\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.primary,\n    paddingHorizontal: SPACING.xl,\n    paddingTop: SPACING.xxl * 2\n  },\n  headerText: {\n    fontSize: FONT_SIZES.large,\n    color: COLORS.white,\n    fontWeight: '600',\n    textAlign: 'center',\n    marginBottom: SPACING.xl\n  },\n  scrollView: {\n    flex: 1\n  },\n  contentContainer: {\n    paddingBottom: SPACING.xl\n  },\n  podcastGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: SPACING.sm\n  },\n  buttonContainer: {\n    paddingBottom: SPACING.xl\n  },\n  finishButton: {\n    width: '100%'\n  }\n});\nexport default PodcastSelectionScreen;","map":{"version":3,"names":["React","useState","View","StyleSheet","Text","ScrollView","PodcastCard","CustomButton","COLORS","FONT_SIZES","SPACING","jsx","_jsx","jsxs","_jsxs","podcasts","id","color","secondary","PodcastSelectionScreen","_ref","navigation","_useState","_useState2","_slicedToArray","selectedPodcasts","setSelectedPodcasts","togglePodcast","podcastId","prev","includes","filter","concat","_toConsumableArray","handleFinish","console","log","style","styles","container","children","headerText","scrollView","contentContainerStyle","contentContainer","showsVerticalScrollIndicator","podcastGrid","map","podcast","isSelected","onPress","backgroundColor","buttonContainer","title","variant","finishButton","create","flex","primary","paddingHorizontal","xl","paddingTop","xxl","fontSize","large","white","fontWeight","textAlign","marginBottom","paddingBottom","flexDirection","flexWrap","justifyContent","alignItems","sm","width"],"sources":["/Users/kiannaliesarmiento/myCode/IQapp/src/screens/auth/PodcastSelectionScreen.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, StyleSheet, Text, ScrollView } from 'react-native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { AuthStackParamList } from '../../navigation/AuthNavigator';\nimport { useAuth } from '../../context/AuthContext';\nimport PodcastCard from '../../components/atoms/PodcastCard';\nimport CustomButton from '../../components/atoms/CustomButton';\nimport { COLORS, FONT_SIZES, SPACING } from '../../utils/constants';\n\ntype PodcastSelectionScreenNavigationProp = StackNavigationProp<\n  AuthStackParamList,\n  'PodcastSelection'\n>;\n\ninterface Props {\n  navigation: PodcastSelectionScreenNavigationProp;\n}\n\n// Mock podcast data with different colors\nconst podcasts = [\n  { id: '1', color: '#ff6b6b' },\n  { id: '2', color: '#4ecdc4' },\n  { id: '3', color: '#45b7d1' },\n  { id: '4', color: '#96ceb4' },\n  { id: '5', color: '#ffeaa7' },\n  { id: '6', color: '#dda0dd' },\n  { id: '7', color: COLORS.secondary },\n  { id: '8', color: '#ff9ff3' },\n  { id: '9', color: '#54a0ff' },\n];\n\nconst PodcastSelectionScreen: React.FC<Props> = ({ navigation }) => {\n  const [selectedPodcasts, setSelectedPodcasts] = useState<string[]>([]);\n\n  const togglePodcast = (podcastId: string) => {\n    setSelectedPodcasts(prev =>\n      prev.includes(podcastId)\n        ? prev.filter(id => id !== podcastId)\n        : [...prev, podcastId]\n    );\n  };\n\n  const handleFinish = () => {\n    // Complete onboarding and navigate to main app\n    // For now, we'll just log the user in (this will be handled by AuthContext)\n    console.log('Onboarding completed with selected podcasts:', selectedPodcasts);\n    // The AuthNavigator will automatically switch to MainNavigator when user is authenticated\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.headerText}>FOLLOW YOUR FAVORITE PODCASTS</Text>\n\n      <ScrollView\n        style={styles.scrollView}\n        contentContainerStyle={styles.contentContainer}\n        showsVerticalScrollIndicator={false}\n      >\n        <View style={styles.podcastGrid}>\n          {podcasts.map((podcast) => (\n            <PodcastCard\n              key={podcast.id}\n              isSelected={selectedPodcasts.includes(podcast.id)}\n              onPress={() => togglePodcast(podcast.id)}\n              backgroundColor={podcast.color}\n            />\n          ))}\n        </View>\n      </ScrollView>\n\n      <View style={styles.buttonContainer}>\n        <CustomButton\n          title=\"Finish\"\n          onPress={handleFinish}\n          variant=\"secondary\"\n          style={styles.finishButton}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.primary,\n    paddingHorizontal: SPACING.xl,\n    paddingTop: SPACING.xxl * 2,\n  },\n  headerText: {\n    fontSize: FONT_SIZES.large,\n    color: COLORS.white,\n    fontWeight: '600',\n    textAlign: 'center',\n    marginBottom: SPACING.xl,\n  },\n  scrollView: {\n    flex: 1,\n  },\n  contentContainer: {\n    paddingBottom: SPACING.xl,\n  },\n  podcastGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: SPACING.sm,\n  },\n  buttonContainer: {\n    paddingBottom: SPACING.xl,\n  },\n  finishButton: {\n    width: '100%',\n  },\n});\n\nexport default PodcastSelectionScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}