{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useAuth } from \"../../context/AuthContext\";\nimport CircleBackground from \"../../components/atoms/CircleBackground\";\nimport CustomButton from \"../../components/atoms/CustomButton\";\nimport { COLORS, FONT_SIZES, SPACING } from \"../../utils/constants\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  screenWidth = _Dimensions$get.width;\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useAuth = useAuth(),\n    signInWithGoogle = _useAuth.signInWithGoogle;\n  var handleGoogleSignIn = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        yield signInWithGoogle();\n      } catch (error) {\n        console.error('Google Sign In failed:', error);\n      }\n    });\n    return function handleGoogleSignIn() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.header,\n      children: _jsx(Text, {\n        style: styles.headerText,\n        children: \"LOGIN\"\n      })\n    }), _jsx(View, {\n      style: styles.circleContainer,\n      children: _jsx(CircleBackground, {\n        size: screenWidth * 0.6\n      })\n    }), _jsx(View, {\n      style: styles.buttonContainer,\n      children: _jsx(CustomButton, {\n        title: \"Sign in with Google\",\n        onPress: handleGoogleSignIn,\n        variant: \"google\",\n        style: styles.googleButton\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.primary,\n    paddingHorizontal: SPACING.xl\n  },\n  header: {\n    paddingTop: SPACING.xxl * 2,\n    alignItems: 'center',\n    marginBottom: SPACING.xl\n  },\n  headerText: {\n    fontSize: FONT_SIZES.large,\n    color: COLORS.white,\n    fontWeight: '600'\n  },\n  circleContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  buttonContainer: {\n    paddingBottom: SPACING.xxl * 2,\n    width: '100%'\n  },\n  googleButton: {\n    width: '100%'\n  }\n});\nexport default LoginScreen;","map":{"version":3,"names":["React","View","StyleSheet","Text","Dimensions","useAuth","CircleBackground","CustomButton","COLORS","FONT_SIZES","SPACING","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","screenWidth","width","LoginScreen","_ref","navigation","_useAuth","signInWithGoogle","handleGoogleSignIn","_ref2","_asyncToGenerator","error","console","apply","arguments","style","styles","container","children","header","headerText","circleContainer","size","buttonContainer","title","onPress","variant","googleButton","create","flex","backgroundColor","primary","paddingHorizontal","xl","paddingTop","xxl","alignItems","marginBottom","fontSize","large","color","white","fontWeight","justifyContent","paddingBottom"],"sources":["/Users/kiannaliesarmiento/myCode/IQapp/src/screens/auth/LoginScreen.tsx"],"sourcesContent":["import React from 'react';\nimport { View, StyleSheet, Text, Dimensions } from 'react-native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { AuthStackParamList } from '../../navigation/AuthNavigator';\nimport { useAuth } from '../../context/AuthContext';\nimport CircleBackground from '../../components/atoms/CircleBackground';\nimport CustomButton from '../../components/atoms/CustomButton';\nimport { COLORS, FONT_SIZES, SPACING } from '../../utils/constants';\n\ntype LoginScreenNavigationProp = StackNavigationProp<\n  AuthStackParamList,\n  'Login'\n>;\n\ninterface Props {\n  navigation: LoginScreenNavigationProp;\n}\n\nconst { width: screenWidth } = Dimensions.get('window');\n\nconst LoginScreen: React.FC<Props> = ({ navigation }) => {\n  const { signInWithGoogle } = useAuth();\n\n  const handleGoogleSignIn = async () => {\n    try {\n      await signInWithGoogle();\n      // User will be redirected by AuthNavigator when auth state changes\n    } catch (error) {\n      console.error('Google Sign In failed:', error);\n      // Handle error (show alert, etc.)\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.headerText}>LOGIN</Text>\n      </View>\n\n      <View style={styles.circleContainer}>\n        <CircleBackground size={screenWidth * 0.6} />\n      </View>\n\n      <View style={styles.buttonContainer}>\n        <CustomButton\n          title=\"Sign in with Google\"\n          onPress={handleGoogleSignIn}\n          variant=\"google\"\n          style={styles.googleButton}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.primary,\n    paddingHorizontal: SPACING.xl,\n  },\n  header: {\n    paddingTop: SPACING.xxl * 2,\n    alignItems: 'center',\n    marginBottom: SPACING.xl,\n  },\n  headerText: {\n    fontSize: FONT_SIZES.large,\n    color: COLORS.white,\n    fontWeight: '600',\n  },\n  circleContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  buttonContainer: {\n    paddingBottom: SPACING.xxl * 2,\n    width: '100%',\n  },\n  googleButton: {\n    width: '100%',\n  },\n});\n\nexport default LoginScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}